{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","pages/Dashboard/styles.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRespositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","basename","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12c48aaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n        -webkit-font-smoothing: antialiased;\n    }\n\n    body, input, button {\n      font: 16px Roboto, sans-serif;\n    }\n\n    #root {\n      max-width: 960px;\n      margin: 0 auto;\n      padding: 40px 20px;\n    }\n\n    button {\n      cursor: pointer;\n    }\n`;\n","import styled, { css} from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps{\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3A3A3A;\n  max-width: 450px;\n  line-height: 56px;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3A3A3A;\n    border: 2px solid #FFF;\n    border-right: 0;\n\n    ${(props) => props.hasError && css`\n      border-color: #C53030;\n    `}\n\n    &::placeholder {\n      color: #A8A8B3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04D361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #FFF;\n    font-weight: bold;\n    transition : background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04D361')}\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #C53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\nmargin-top: 80px;\nmax-width: 700px;\n\n  a {\n    background: #FFF;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover{\n      transform: translateX(10px);\n      transition: transform 0.2s;\n    }\n\n    img {\n      width: 60px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3D3D4D;\n      }\n\n      P {\n        font-size: 18px;\n        color: #A8A8B3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #CBCBD6;\n    }\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com/'\n});\n\nexport default api;\n","import React, { useState, FormEvent, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Title, Form, Repositories, Error } from './styles';\nimport { Link } from 'react-router-dom';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface Repository{\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n  description: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRespositories = localStorage.getItem('@GithubExplorer:repositories');\n    if(storagedRespositories){\n      return JSON.parse(storagedRespositories);\n    } else {\n      return [];\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories))\n  }, [repositories])\n\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n    event.preventDefault();\n\n    if(!newRepo){\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`)\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (error) {\n      setInputError('Repositório não localizado!');\n    }\n  }\n\n  return (\n    <>\n    <img src={logoImg} alt=\"Github Explorer\"/>\n    <Title>Explore repositórios no Github</Title>\n\n    <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n      <input\n      value={newRepo}\n      onChange={e => setNewRepo(e.target.value)}\n      placeholder=\"Digite o nome do repositório\"\n      />\n      <button type=\"submit\">Pesquisar</button>\n    </Form>\n\n    { inputError && <Error>{inputError}</Error>}\n\n    <Repositories>\n      {repositories.map(repository => (\n        <Link key={repository.full_name}\n        to={`/repositories/${repository.full_name}`}>\n        <img src={repository.owner.avatar_url} alt={repository.owner.login}/>\n        <div>\n          <strong>{repository.full_name}</strong>\n          <p>{repository.description}</p>\n        </div>\n        <FiChevronRight size={20}/>\n      </Link>\n      ))}\n    </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #A8A8B3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n  }\n\n  svg {\n    margin-right: 4px;\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n  }\n\n  img {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n  }\n\n  div {\n    margin-left: 24px;\n\n    strong {\n      font-size: 36px;\n      color: #3D3D4D;\n    }\n\n    p {\n      font-size: 18px;\n      color: #737380;\n      margin-top: 4px;\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3D3D4D;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6C6C80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\nmargin-top: 80px;\n\n  a {\n    background: #FFF;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover{\n      transform: translateX(10px);\n      transition: transform 0.2s;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3D3D4D;\n      }\n\n      P {\n        font-size: 18px;\n        color: #A8A8B3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #CBCBD6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository{\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  }\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then((response) => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then((response) => {\n      setIssues(response.data);\n    });\n  },[params.repository]);\n\nreturn (\n  <>\n    <Header>\n      <img src={logoImg} alt=\"Github Explorer\"/>\n        <Link to=\"/\">\n          <FiChevronLeft size={16}/>\n          voltar\n        </Link>\n    </Header>\n\n    { repository && (\n      <RepositoryInfo>\n      <header>\n        <img src={repository.owner.avatar_url} alt={repository.owner.login}/>\n        <div>\n          <strong>{repository.full_name}</strong>\n          <p>{repository.description}</p>\n        </div>\n      </header>\n      <ul>\n        <li>\n        <strong>{repository.stargazers_count}</strong>\n          <span>Stars</span>\n        </li>\n        <li>\n        <strong>{repository.forks_count}</strong>\n          <span>Forks</span>\n        </li>\n        <li>\n        <strong>{repository.open_issues_count}</strong>\n          <span>Issues Abertas</span>\n        </li>\n      </ul>\n    </ RepositoryInfo>\n    )}\n\n    <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n          <FiChevronRight size={20}/>\n        </a>\n        ))}\n    </Issues>\n  </>\n);\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route} from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}